generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  role          String    @default("user") // user | moderator | admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  payments      Payment[]
  messagesSent  Message[] @relation("sentMessages")
  messagesRecv  Message[] @relation("recvMessages")
}

model Profile {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  caste       String?
  city        String?
  age         Int?
  gender      String?
  about       String?
  photos      Json?    // list of urls
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String @id @default(cuid())
  userId            String
  user              User   @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model Subscription {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  stripeSubscriptionId String @unique
  priceId         String
  status          String
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean @default(false)
  createdAt       DateTime @default(now())
}

model Payment {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  stripePaymentIntentId String?
  amount            Int
  currency          String
  status            String
  metadata          Json?
  createdAt         DateTime @default(now())
}

model Message {
  id        String  @id @default(cuid())
  sender    User    @relation("sentMessages", fields: [senderId], references: [id])
  senderId  String
  receiver  User    @relation("recvMessages", fields: [receiverId], references: [id])
  receiverId String
  body      String
  read      Boolean @default(false)
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String  @id @default(cuid())
  actorId   String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
}
